// generated by tscfg 0.9.96 on Fri Dec 18 11:06:32 CET 2020
// source: config.cfg

package com.niton.jauth.config;

public class AuthConfig {
  public final AuthConfig.Security security;
  public static class Security {
    public final int perma_duration;
    public final Security.Session session;
    public static class Session {
      public final Session.Ip_ban ip_ban;
      public final int valid_for;
      public static class Ip_ban {
        public final boolean cumulative;
        public final int cumulative_max;
        public final int duration;
        public final int perma_ban_on;
        
        public Ip_ban(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
          this.cumulative = !c.hasPathOrNull("cumulative") || c.getBoolean("cumulative");
          this.cumulative_max = c.hasPathOrNull("cumulative-max") ? c.getInt("cumulative-max") : 4000;
          this.duration = c.hasPathOrNull("duration") ? c.getInt("duration") : 2000;
          this.perma_ban_on = c.hasPathOrNull("perma-ban-on") ? c.getInt("perma-ban-on") : 20;
        }
      }
      
      public Session(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this.ip_ban = c.hasPathOrNull("ip-ban") ? new Session.Ip_ban(c.getConfig("ip-ban"), parentPath + "ip-ban.", $tsCfgValidator) : new Session.Ip_ban(com.typesafe.config.ConfigFactory.parseString("ip-ban{}"), parentPath + "ip-ban.", $tsCfgValidator);
        this.valid_for = c.hasPathOrNull("valid-for") ? c.getInt("valid-for") : 300000;
      }
    }
    
    public Security(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this.perma_duration = c.hasPathOrNull("perma-duration") ? c.getInt("perma-duration") : 168;
      this.session = c.hasPathOrNull("session") ? new Security.Session(c.getConfig("session"), parentPath + "session.", $tsCfgValidator) : new Security.Session(com.typesafe.config.ConfigFactory.parseString("session{}"), parentPath + "session.", $tsCfgValidator);
    }
  }
  
  public AuthConfig(com.typesafe.config.Config c) {
    final $TsCfgValidator $tsCfgValidator = new $TsCfgValidator();
    final java.lang.String parentPath = "";
    this.security = c.hasPathOrNull("security") ? new AuthConfig.Security(c.getConfig("security"), parentPath + "security.", $tsCfgValidator) : new AuthConfig.Security(com.typesafe.config.ConfigFactory.parseString("security{}"), parentPath + "security.", $tsCfgValidator);
    $tsCfgValidator.validate();
  }
  private static final class $TsCfgValidator  {
    private final java.util.List<java.lang.String> badPaths = new java.util.ArrayList<>();
    
    void addBadPath(java.lang.String path, com.typesafe.config.ConfigException e) {
      badPaths.add("'" + path + "': " + e.getClass().getName() + "(" + e.getMessage() + ")");
    }
    
    void validate() {
      if (!badPaths.isEmpty()) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Invalid configuration:");
        for (java.lang.String path : badPaths) {
          sb.append("\n    ").append(path);
        }
        throw new com.typesafe.config.ConfigException(sb.toString()) {};
      }
    }
  }
}
      
